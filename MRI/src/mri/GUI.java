/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mri;

import BayesianClassifier.OverAllAccuracy;
import People.*;
import java.awt.HeadlessException;
import java.io.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.util.Pair;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;


@SuppressWarnings("serial")
public class GUI extends javax.swing.JFrame 
{

    /**
     * Creates new form GUI
     */
    private Person user;
    private final ArrayList<File> paths = new ArrayList<>();
    private final ArrayList<File> normalizedPictures = new ArrayList<>();
    private final ArrayList<File> alreadyNormalized = new ArrayList<>();
    
    public GUI() throws IOException 
    {
        initComponents();
        
        HomePage.setVisible(true);
        AdminPage.setVisible(false);
        DoctorPage.setVisible(false);
        PatientPage.setVisible(false);
        
        Person.setPeople();
        Patient.setPatients();
        Admin.setPendingToTest();
   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void clear()
    { 
        idText.setEnabled(false);
        passwordField.setEnabled(false);
        loginButton.setEnabled(false);
        choices.setEnabled(false);
        choices.removeAllItems();
        normalizedChoices.setEnabled(false);
        normalizedChoices.removeAllItems();
        NormalizedPhoto_label.setIcon(null);
        DoctorChoices.setEnabled(false);
        DoctorChoices.removeAllItems();
        patientIdValue.setVisible(false);
        OriginalPhoto_label.setIcon(null);
        doctorPhotoLabel.setIcon(null);
        normalizeButton.setEnabled(false);
        extractButton.setEnabled(false);
        TrainButton.setEnabled(false);
        TestButton.setEnabled(false);
        sendToTest.setEnabled(false);
        validateButton.setEnabled(false);
        
        if(Readable.check("OverAllAccuracy.txt")) 
        {
            overAllAccuracy.setEnabled(true);
        } 
        else 
        {
            overAllAccuracy.setEnabled(false);
        }
        
        BrowsePictureAdmin_button.setEnabled(true);
        paths.clear();
        normalizedPictures.clear();
        
        if (Admin.getPendingToTest() > 0)
        {
            testLabel1.setVisible(true);
            testLabel2.setVisible(true);
            testLabel2.setText(String.valueOf(Admin.getPendingToTest()));
            toBeTested_button.setVisible(true);
        }
        
        DefaultTableModel tbModel = (DefaultTableModel) FeaturesMatrix_table.getModel();
        int numOfRows = tbModel.getRowCount();
        
        for(int i = 0; i < numOfRows; i++) 
        {
            tbModel.removeRow(0);
        }
        if (tbModel.getColumnCount() > 7)
        {
            TableColumn tcol = FeaturesMatrix_table.getColumnModel().getColumn(tbModel.getColumnCount() - 1);
            tbModel.setColumnCount(7);
            FeaturesMatrix_table.removeColumn(tcol);
        }
        
    }
    
    private void logout()
    {
        HomePage.setVisible(true);
        AdminPage.setVisible(false);
        DoctorPage.setVisible(false);
        PatientPage.setVisible(false);
        Users.clearSelection();
        loginButton.setEnabled(false);
        idText.setText("");
        passwordField.setText("");
        clear();
        
    }
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Users = new javax.swing.ButtonGroup();
        jDialog1 = new javax.swing.JDialog();
        AdminPage = new javax.swing.JPanel();
        OriginalImageLabel = new javax.swing.JLabel();
        OriginalPhoto_label = new javax.swing.JLabel();
        NormalizedImageLabel = new javax.swing.JLabel();
        NormalizedPhoto_label = new javax.swing.JLabel();
        FeaturesMatrix_Label = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        FeaturesMatrix_table = new javax.swing.JTable();
        logOutAdminPage = new javax.swing.JButton();
        BrowsePictureAdmin_button = new javax.swing.JButton();
        choices = new javax.swing.JComboBox<>();
        TrainButton = new javax.swing.JButton();
        normalizeButton = new javax.swing.JButton();
        extractButton = new javax.swing.JButton();
        normalizedChoices = new javax.swing.JComboBox<>();
        TestButton = new javax.swing.JButton();
        testLabel2 = new javax.swing.JLabel();
        clearAdminButton = new javax.swing.JButton();
        toBeTested_button = new javax.swing.JButton();
        numberOfPhotosToBeTested_label = new javax.swing.JLabel();
        testLabel1 = new javax.swing.JLabel();
        validateButton = new javax.swing.JButton();
        overAllAccuracy = new javax.swing.JButton();
        PatientPage = new javax.swing.JPanel();
        logOutPatientPage = new javax.swing.JButton();
        patientIDLabel = new javax.swing.JLabel();
        PatientID = new javax.swing.JLabel();
        PatientImage = new javax.swing.JLabel();
        ResultLabel = new javax.swing.JLabel();
        Result = new javax.swing.JLabel();
        HomePage = new javax.swing.JPanel();
        TitleLabel = new javax.swing.JLabel();
        userLabel = new javax.swing.JLabel();
        idLabel = new javax.swing.JLabel();
        idText = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        AdminRadioButton = new javax.swing.JRadioButton();
        DoctorRadioButton = new javax.swing.JRadioButton();
        PatientRadioButton = new javax.swing.JRadioButton();
        loginButton = new javax.swing.JButton();
        DoctorPage = new javax.swing.JPanel();
        patientIdValue = new javax.swing.JLabel();
        BrowsePictureDoctor_button = new javax.swing.JButton();
        DoctorChoices = new javax.swing.JComboBox<>();
        doctorPhotoLabel = new javax.swing.JLabel();
        sendToTest = new javax.swing.JButton();
        logOutDoctorPage = new javax.swing.JButton();
        clearDoctorButton = new javax.swing.JButton();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MRI Classification");
        getContentPane().setLayout(new java.awt.CardLayout());

        OriginalImageLabel.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        OriginalImageLabel.setText("Original Image");

        OriginalPhoto_label.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        OriginalPhoto_label.setMaximumSize(new java.awt.Dimension(500, 500));
        OriginalPhoto_label.setName(""); // NOI18N

        NormalizedImageLabel.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        NormalizedImageLabel.setText("Normalized Image");

        NormalizedPhoto_label.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        FeaturesMatrix_Label.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        FeaturesMatrix_Label.setText("          Features Matrix");

        FeaturesMatrix_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Mean", "Varience", "Skewness", "Smoothness", "Kurtosis", "ImageClass"
            }
        ));
        jScrollPane1.setViewportView(FeaturesMatrix_table);

        logOutAdminPage.setText("Logout");
        logOutAdminPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutAdminPageActionPerformed(evt);
            }
        });

        BrowsePictureAdmin_button.setText("Browse Photo");
        BrowsePictureAdmin_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowsePictureAdmin_buttonActionPerformed(evt);
            }
        });

        choices.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{}));
        choices.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choicesActionPerformed(evt);
            }
        });

        TrainButton.setText("Train");
        TrainButton.setEnabled(false);
        TrainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TrainButtonActionPerformed(evt);
            }
        });

        normalizeButton.setText("Normalize");
        normalizeButton.setEnabled(false);
        normalizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normalizeButtonActionPerformed(evt);
            }
        });

        extractButton.setText("Extract Features");
        extractButton.setEnabled(false);
        extractButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extractButtonActionPerformed(evt);
            }
        });

        normalizedChoices.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));
        normalizedChoices.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normalizedChoicesActionPerformed(evt);
            }
        });

        TestButton.setText("Test");
        TestButton.setEnabled(false);
        TestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TestButtonActionPerformed(evt);
            }
        });

        testLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        testLabel2.setForeground(new java.awt.Color(255, 0, 0));

        clearAdminButton.setText("Clear");
        clearAdminButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAdminButtonActionPerformed(evt);
            }
        });

        toBeTested_button.setText("Test Now");
        toBeTested_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toBeTested_buttonActionPerformed(evt);
            }
        });

        testLabel1.setText("You Have Images To Be Tested");

        validateButton.setText("Validate The Model");
        validateButton.setToolTipText("");
        validateButton.setEnabled(false);
        validateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validateButtonActionPerformed(evt);
            }
        });

        overAllAccuracy.setText("Model's OverAll Accuracy");
        overAllAccuracy.setToolTipText("");
        overAllAccuracy.setEnabled(false);
        overAllAccuracy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                overAllAccuracyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout AdminPageLayout = new javax.swing.GroupLayout(AdminPage);
        AdminPage.setLayout(AdminPageLayout);
        AdminPageLayout.setHorizontalGroup(
            AdminPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AdminPageLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(FeaturesMatrix_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AdminPageLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(numberOfPhotosToBeTested_label)
                .addGap(32, 32, 32)
                .addComponent(testLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(testLabel1)
                .addGap(30, 30, 30)
                .addComponent(toBeTested_button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(clearAdminButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(logOutAdminPage)
                .addGap(51, 51, 51))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AdminPageLayout.createSequentialGroup()
                .addGroup(AdminPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AdminPageLayout.createSequentialGroup()
                        .addGap(173, 173, 173)
                        .addComponent(OriginalImageLabel))
                    .addGroup(AdminPageLayout.createSequentialGroup()
                        .addGap(122, 122, 122)
                        .addComponent(OriginalPhoto_label, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(AdminPageLayout.createSequentialGroup()
                        .addGap(143, 143, 143)
                        .addGroup(AdminPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(choices, 0, 160, Short.MAX_VALUE)
                            .addComponent(BrowsePictureAdmin_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(normalizeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 253, Short.MAX_VALUE)
                .addGroup(AdminPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(AdminPageLayout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(NormalizedImageLabel))
                    .addComponent(normalizedChoices, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(NormalizedPhoto_label, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(overAllAccuracy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(TestButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(AdminPageLayout.createSequentialGroup()
                        .addComponent(TrainButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(validateButton))
                    .addComponent(extractButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(99, 99, 99))
        );
        AdminPageLayout.setVerticalGroup(
            AdminPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AdminPageLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(AdminPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(AdminPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(testLabel1)
                        .addGroup(AdminPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(toBeTested_button)
                            .addComponent(numberOfPhotosToBeTested_label)
                            .addComponent(logOutAdminPage)
                            .addComponent(clearAdminButton)))
                    .addComponent(testLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49)
                .addGroup(AdminPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AdminPageLayout.createSequentialGroup()
                        .addComponent(OriginalImageLabel)
                        .addGap(18, 18, 18)
                        .addComponent(OriginalPhoto_label, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(BrowsePictureAdmin_button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(choices, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(normalizeButton))
                    .addGroup(AdminPageLayout.createSequentialGroup()
                        .addComponent(NormalizedImageLabel)
                        .addGap(18, 18, 18)
                        .addComponent(NormalizedPhoto_label, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(normalizedChoices, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(extractButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(AdminPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TrainButton)
                            .addComponent(validateButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TestButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(overAllAccuracy)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(FeaturesMatrix_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51))
        );

        getContentPane().add(AdminPage, "card5");
        normalizeButton.setEnabled(false);
        extractButton.setEnabled(false);
        TrainButton.setEnabled(false);
        TestButton.setEnabled(false);
        patientIdValue.setVisible(false);
        testLabel1.setVisible(false);
        testLabel2.setVisible(false);
        toBeTested_button.setVisible(false);
        choices.setEnabled(false);
        normalizedChoices.setEnabled(false);
        overAllAccuracy.setEnabled(false);

        logOutPatientPage.setText("Logout");
        logOutPatientPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutPatientPageActionPerformed(evt);
            }
        });

        patientIDLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        patientIDLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        patientIDLabel.setText("Patient ID");

        PatientID.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N

        PatientImage.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        PatientImage.setMaximumSize(new java.awt.Dimension(500, 500));
        PatientImage.setName(""); // NOI18N

        ResultLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        ResultLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ResultLabel.setText("Result");

        Result.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N

        javax.swing.GroupLayout PatientPageLayout = new javax.swing.GroupLayout(PatientPage);
        PatientPage.setLayout(PatientPageLayout);
        PatientPageLayout.setHorizontalGroup(
            PatientPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PatientPageLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(logOutPatientPage)
                .addGap(79, 79, 79))
            .addGroup(PatientPageLayout.createSequentialGroup()
                .addGroup(PatientPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PatientPageLayout.createSequentialGroup()
                        .addGap(299, 299, 299)
                        .addComponent(PatientImage, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PatientPageLayout.createSequentialGroup()
                        .addGap(233, 233, 233)
                        .addGroup(PatientPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ResultLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(patientIDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(PatientPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PatientID, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Result, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(371, Short.MAX_VALUE))
        );
        PatientPageLayout.setVerticalGroup(
            PatientPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PatientPageLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(logOutPatientPage)
                .addGap(12, 12, 12)
                .addComponent(PatientImage, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(PatientPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Result, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(PatientPageLayout.createSequentialGroup()
                        .addGroup(PatientPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(patientIDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PatientID, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addComponent(ResultLabel)))
                .addContainerGap(369, Short.MAX_VALUE))
        );

        getContentPane().add(PatientPage, "card5");

        TitleLabel.setFont(new java.awt.Font("Lucida Grande", 1, 36)); // NOI18N
        TitleLabel.setText("MRI Classification");

        userLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        userLabel.setText("Please Choose A User");

        idLabel.setText("ID");

        idText.setEnabled(false);

        passwordLabel.setText("Password");

        passwordField.setEnabled(false);
        passwordField.setPreferredSize(new java.awt.Dimension(100, 22));

        Users.add(AdminRadioButton);
        AdminRadioButton.setText("Admin");
        AdminRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AdminRadioButtonActionPerformed(evt);
            }
        });

        Users.add(DoctorRadioButton);
        DoctorRadioButton.setText("Doctor");
        DoctorRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DoctorRadioButtonActionPerformed(evt);
            }
        });

        Users.add(PatientRadioButton);
        PatientRadioButton.setText("Patient");
        PatientRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PatientRadioButtonActionPerformed(evt);
            }
        });

        loginButton.setText("Login");
        loginButton.setEnabled(false);
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout HomePageLayout = new javax.swing.GroupLayout(HomePage);
        HomePage.setLayout(HomePageLayout);
        HomePageLayout.setHorizontalGroup(
            HomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HomePageLayout.createSequentialGroup()
                .addGap(191, 191, 191)
                .addGroup(HomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(DoctorRadioButton)
                    .addComponent(AdminRadioButton)
                    .addComponent(PatientRadioButton))
                .addGroup(HomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(HomePageLayout.createSequentialGroup()
                        .addGap(193, 193, 193)
                        .addComponent(idLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(HomePageLayout.createSequentialGroup()
                        .addGap(167, 167, 167)
                        .addComponent(passwordLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(HomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(idText, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(212, 212, 212))
            .addGroup(HomePageLayout.createSequentialGroup()
                .addGroup(HomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(HomePageLayout.createSequentialGroup()
                        .addGap(223, 223, 223)
                        .addComponent(TitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(HomePageLayout.createSequentialGroup()
                        .addGap(280, 280, 280)
                        .addComponent(userLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(HomePageLayout.createSequentialGroup()
                        .addGap(334, 334, 334)
                        .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(312, Short.MAX_VALUE))
        );
        HomePageLayout.setVerticalGroup(
            HomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HomePageLayout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(TitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(HomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(HomePageLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(userLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62)
                        .addGroup(HomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(idLabel)
                            .addComponent(idText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(HomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(passwordLabel)))
                    .addGroup(HomePageLayout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addComponent(AdminRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(DoctorRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(PatientRadioButton)))
                .addGap(32, 32, 32)
                .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(399, Short.MAX_VALUE))
        );

        getContentPane().add(HomePage, "card2");

        patientIdValue.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N

        BrowsePictureDoctor_button.setText("Browse Photo");
        BrowsePictureDoctor_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowsePictureDoctor_buttonActionPerformed(evt);
            }
        });

        DoctorChoices.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{}));
        DoctorChoices.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DoctorChoicesActionPerformed(evt);
            }
        });

        doctorPhotoLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        doctorPhotoLabel.setMaximumSize(new java.awt.Dimension(500, 500));
        doctorPhotoLabel.setName(""); // NOI18N

        sendToTest.setText("Send To Test");
        sendToTest.setEnabled(false);
        sendToTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendToTestActionPerformed(evt);
            }
        });

        logOutDoctorPage.setText("Logout");
        logOutDoctorPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutDoctorPageActionPerformed(evt);
            }
        });

        clearDoctorButton.setText("Clear");
        clearDoctorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearDoctorButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout DoctorPageLayout = new javax.swing.GroupLayout(DoctorPage);
        DoctorPage.setLayout(DoctorPageLayout);
        DoctorPageLayout.setHorizontalGroup(
            DoctorPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DoctorPageLayout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addComponent(patientIdValue, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 439, Short.MAX_VALUE)
                .addComponent(clearDoctorButton)
                .addGap(18, 18, 18)
                .addComponent(logOutDoctorPage)
                .addGap(79, 79, 79))
            .addGroup(DoctorPageLayout.createSequentialGroup()
                .addGap(314, 314, 314)
                .addGroup(DoctorPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(sendToTest, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addComponent(DoctorChoices, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BrowsePictureDoctor_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(doctorPhotoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        DoctorPageLayout.setVerticalGroup(
            DoctorPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DoctorPageLayout.createSequentialGroup()
                .addGroup(DoctorPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(DoctorPageLayout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addGroup(DoctorPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(logOutDoctorPage)
                            .addComponent(clearDoctorButton)))
                    .addGroup(DoctorPageLayout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(patientIdValue, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(9, 9, 9)
                .addComponent(doctorPhotoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(BrowsePictureDoctor_button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(DoctorChoices, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sendToTest)
                .addContainerGap(367, Short.MAX_VALUE))
        );

        getContentPane().add(DoctorPage, "card4");
        DoctorChoices.setEnabled(false);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AdminRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdminRadioButtonActionPerformed
        
        loginButton.setEnabled(true);
        idText.setEnabled(true);
        passwordField.setEnabled(true);
        
    }//GEN-LAST:event_AdminRadioButtonActionPerformed

    private void DoctorRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DoctorRadioButtonActionPerformed
        
        loginButton.setEnabled(true);
        idText.setEnabled(true);
        passwordField.setEnabled(true);
        
    }//GEN-LAST:event_DoctorRadioButtonActionPerformed

    private void PatientRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PatientRadioButtonActionPerformed
        
        loginButton.setEnabled(true);
        idText.setEnabled(true);
        passwordField.setEnabled(true);
        
        try 
        {
            Patient.setPatientID(1);
            Patient.setPatients();
        } 
        catch (IOException ex) 
        {
            JOptionPane.showMessageDialog(null, ex.getMessage(),"Exception", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_PatientRadioButtonActionPerformed

    @SuppressWarnings("deprecation")
    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        
        try
        {
            if (idText.getText().isEmpty() || passwordField.getText().isEmpty())
            {
                throw new InvalidInput ("Incomplete Data!\nPlease Complete Your Data.");
            }
            
            if (AdminRadioButton.isSelected()) 
            {
                user = Person.checkPassword("Admin", idText.getText(), passwordField.getText());
            } 
            else if (DoctorRadioButton.isSelected()) 
            {
                user = Person.checkPassword("Doctor", idText.getText(), passwordField.getText());
            } 
            else if (PatientRadioButton.isSelected()) 
            {   
                if (Integer.valueOf(idText.getText())>(Patient.getPatientID()-1) &&
                        Integer.valueOf(idText.getText())<(Admin.getPendingToTest()+Patient.getPatientID()))
                {
                    JOptionPane.showMessageDialog(this,"Your image is still being tested\n Please check it later","InProgress" ,JOptionPane.INFORMATION_MESSAGE);
                    idText.setText("");
                    passwordField.setText("");
                    return ;
                }
                user = Person.checkPassword("Patient", idText.getText(), passwordField.getText());
               
            }
            
            if (user == null)
            {
                idText.setText("");
                passwordField.setText("");
                
                throw new InvalidInput ("Wrong User Data!\nRe-Enter Your Data.");
            }
            else
            {
                HomePage.setVisible(false);

                if (user instanceof Admin) 
                {
                    AdminPage.setVisible(false);
                    testLabel1.setVisible(false);
                    testLabel2.setVisible(false);
                    toBeTested_button.setVisible(false);
                    if(Readable.check("OverAllAccuracy.txt")) 
                    {
                        overAllAccuracy.setEnabled(true);
                    }
                    
                    if (Admin.getPendingToTest()>0)
                    {
                        int input;
                        input = JOptionPane.showConfirmDialog(this, 
                                "You have " + Admin.getPendingToTest()
                                + " to test! Do you want to test now ?", "Images To Be Tested", 
                                JOptionPane.OK_CANCEL_OPTION);
                         
                        if (input == 0)
                        {
                            ((Readable)user).readFromFile();
                            ((Admin)user).setMatrix();
                             
                            
                            BrowsePictureAdmin_button.setEnabled(false);
                            TestButton.setEnabled(false);
                            TrainButton.setEnabled(false);
                            normalizeButton.setEnabled(true);
                            choices.setEnabled(true);
                            paths.clear();

                            for (int i = 0; i < ((Admin)user).getPatientsToTest().size(); i++)
                            {
                                paths.add(((Admin)user).getPatientsToTest().get(i).getKey());
                                choices.addItem(((Admin)user).getPatientsToTest().get(i).getKey().getName());
                            }
                        }
                        else 
                        {   
                            testLabel1.setVisible(true);
                            testLabel2.setVisible(true);
                            testLabel2.setText(String.valueOf(Admin.getPendingToTest()));

                            toBeTested_button.setVisible(true);
                        }
                    }
                    
                }
                else if (user instanceof Patient) 
                {
                    PatientPage.setVisible(true);
                    
                    for(Pair<File,Patient> p : Patient.getPatients())
                    {
                        if(p.getValue().getId().equals(user.getId()))
                        {
                            ImageIcon imgIcon = new ImageIcon(p.getKey().getPath());
                            PatientImage.setIcon(imgIcon);
                            PatientID.setText(user.getId());
                        }
                        
                    }
                   
                    if (user instanceof tumorPatient) 
                    {
                        Result.setText("Tumor");
                    }
                    else if (user instanceof normalPatient) 
                    {
                        Result.setText("Normal");
                    } 
                    else 
                    {
                        Result.setText("Not predicted yet");
                    }
                    
                } 
                else if (user instanceof Doctor) 
                {
                    DoctorPage.setVisible(true);
                }

            }
        }
        catch(HeadlessException | IOException | InvalidInput ex )
        {
            JOptionPane.showMessageDialog(this, ex, "Exception", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_loginButtonActionPerformed

    @SuppressWarnings({"ManualArrayToCollectionCopy", "unchecked"})
    private void BrowsePictureDoctor_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowsePictureDoctor_buttonActionPerformed
         
        JFileChooser chooseToOpen = new JFileChooser(System.getProperty("user.dir"));
        chooseToOpen.setMultiSelectionEnabled(true);
        int returnvalue = chooseToOpen.showOpenDialog(this);
       
        File[] selectedFiles;
        
        if (returnvalue == JFileChooser.APPROVE_OPTION)
        {
            chooseToOpen.setVisible(false);
            selectedFiles = chooseToOpen.getSelectedFiles();
            ((Doctor)user).getPatientsToTest().clear();
            
            for (File selectedFile : selectedFiles) 
            {
                paths.add(selectedFile);
                DoctorChoices.addItem(selectedFile.getName());
            }
            
            if (!paths.isEmpty())
            {
                ImageIcon imgIcon = new ImageIcon(paths.get(0).toString());
                doctorPhotoLabel.setIcon(imgIcon);
                patientIdValue.setVisible(true);
                sendToTest.setEnabled(true);
                
                patientIdValue.setText("Patient " + 
                        (Patient.getPatientID() + ((Doctor)user).getPatientsToTest().size()
                                + Admin.getPendingToTest()));

                DoctorChoices.setEnabled(true);
                
                for (int i = ((Doctor)user).getPatientsToTest().size(); i < paths.size(); i++) 
                {
                    ((Doctor)user).getPatientsToTest().
                            add(new Pair<>(Patient.getPatientID() + ((Doctor)user).getPatientsToTest().size()
                                    + Admin.getPendingToTest(), paths.get(i)));
                } 
            }
           
        }

    }//GEN-LAST:event_BrowsePictureDoctor_buttonActionPerformed

    private void DoctorChoicesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DoctorChoicesActionPerformed
        
        if (DoctorChoices.isEnabled())
        {
            ImageIcon imgIcon = new ImageIcon(paths.get(DoctorChoices.getSelectedIndex()).toString());
            doctorPhotoLabel.setIcon(imgIcon);

            for (Pair<Integer,File> patient : ((Doctor)user).getPatientsToTest())
            {
                if ((patient.getValue().toString().
                        equals(paths.get(DoctorChoices.getSelectedIndex()).toString())))
                {
                    patientIdValue.setText("Patient " + patient.getKey());
                    break;
                }
            }
       }
        
    }//GEN-LAST:event_DoctorChoicesActionPerformed

    private void sendToTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendToTestActionPerformed
        
        try 
        {
           ((Writable)user).writeToFile();
            Admin.setPendingToTest();
            
            JOptionPane.showMessageDialog(null, "Patient Images are sent to Test Succesfully!"
                    , "Info", JOptionPane.INFORMATION_MESSAGE);
        } 
        catch (IOException ex) 
        {
            JOptionPane.showMessageDialog(null, ex, "Exception", JOptionPane.ERROR_MESSAGE);
        }
        clear();
        
    }//GEN-LAST:event_sendToTestActionPerformed

    private void logOutDoctorPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutDoctorPageActionPerformed
        
        logout();
        
    }//GEN-LAST:event_logOutDoctorPageActionPerformed

    private void logOutPatientPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutPatientPageActionPerformed
        
        logout();
        
    }//GEN-LAST:event_logOutPatientPageActionPerformed

    private void clearDoctorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearDoctorButtonActionPerformed
        
        clear();
    
    }//GEN-LAST:event_clearDoctorButtonActionPerformed

    private void overAllAccuracyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_overAllAccuracyActionPerformed
        
        try 
        {
            ((Admin) user).getOverallAccuracy().readFromFile();
            
            JOptionPane.showMessageDialog(null, "The Model's OverAll Accuracy: "
                    + String.valueOf(OverAllAccuracy.getOverAllAccuracy()) + " %", "Info",
                    JOptionPane.INFORMATION_MESSAGE);
        } 
        catch (IOException ex) 
        {
            JOptionPane.showMessageDialog(null, ex, "Exception", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_overAllAccuracyActionPerformed

    private void validateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validateButtonActionPerformed

        clear();
        BrowsePictureAdmin_button.setEnabled(false);
        try 
        {
            Pair <ArrayList<String[]>, ArrayList<String>> data = ((Admin)user).OverallAccuracy();
            
            DefaultTableModel tbModel = (DefaultTableModel) FeaturesMatrix_table.getModel();
            tbModel.addColumn("Prediction");
            
            for (int i = 0; i < data.getKey().size(); i++)
            {   
                tbModel.addRow(data.getKey().get(i));
                tbModel.setValueAt(data.getValue().get(i), 
                        tbModel.getRowCount() - 1, tbModel.getColumnCount() - 1);
            }

            overAllAccuracy.setEnabled(true);
        }
        catch (IOException ex) 
        {
            JOptionPane.showMessageDialog(null, ex, "Exception", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_validateButtonActionPerformed

    private void toBeTested_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toBeTested_buttonActionPerformed
        
        clear();
        testLabel1.setVisible(false);
        testLabel2.setVisible(false);
        toBeTested_button.setVisible(false);
        try 
        {
            ((Readable)user).readFromFile();
        
            ((Admin)user).setMatrix();

            BrowsePictureAdmin_button.setEnabled(false);
            TestButton.setEnabled(false);
            TrainButton.setEnabled(false);
            normalizeButton.setEnabled(true);

            choices.setEnabled(true);

            paths.clear();

            for (int i = 0; i < ((Admin)user).getPatientsToTest().size(); i++)
            {
                paths.add(((Admin)user).getPatientsToTest().get(i).getKey());
                choices.addItem(((Admin)user).getPatientsToTest().get(i).getKey().getName());
            }

            toBeTested_button.setVisible(false);
            testLabel1.setVisible(false);
            testLabel2.setVisible(false);
        }
        catch (IOException ex)
        {
            JOptionPane.showMessageDialog(null, ex, "Exception", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_toBeTested_buttonActionPerformed

    private void clearAdminButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAdminButtonActionPerformed

        clear();

    }//GEN-LAST:event_clearAdminButtonActionPerformed

    private void TestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TestButtonActionPerformed

        try
        {
            ((Admin)user).Test();
            String [] data = ((Admin)user).getResults();

            DefaultTableModel tbModel = (DefaultTableModel) FeaturesMatrix_table.getModel();

            for (int i = 0; i < tbModel.getRowCount(); i++)
            {
                tbModel.setValueAt(data[i], i, tbModel.getColumnCount() - 1);
            }

            ((Admin)user).setMatrix();

            JOptionPane.showMessageDialog(null, "Test Done Succesfully!",
                "Info", JOptionPane.INFORMATION_MESSAGE);
            
            Admin.setPendingToTest();
            TestButton.setEnabled(false);
            extractButton.setEnabled(false);
            normalizeButton.setEnabled(false);
        }
        catch (IOException ex)
        {
            JOptionPane.showMessageDialog(null, ex.getMessage(),"Exception", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_TestButtonActionPerformed

    private void normalizedChoicesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_normalizedChoicesActionPerformed

        if (normalizedChoices.isEnabled())
        {
            ImageIcon imgIcon = new ImageIcon(normalizedPictures.
                get(normalizedChoices.getSelectedIndex()).toString());
            NormalizedPhoto_label.setIcon(imgIcon);
        }
        
    }//GEN-LAST:event_normalizedChoicesActionPerformed

    private void extractButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extractButtonActionPerformed

        try
        {
            DefaultTableModel tbModel = (DefaultTableModel) FeaturesMatrix_table.getModel();
            int numOfRows = tbModel.getRowCount();

            for(int i = 0; i < numOfRows; i++)
            {
                tbModel.removeRow(0);
            }
            
            ((Admin )user).setMatrix();

            for (int i = 0; i < normalizedPictures.size(); i++)
            {
                String[] data;

                if (BrowsePictureAdmin_button.isEnabled())
                {
                    data = ((Admin )user).ExtractFeatures("Train", normalizedPictures.get(i));
                    TrainButton.setEnabled(true);
                }
                else
                {
                    ((Admin )user).getPatientsToTest().set(i, new Pair<> (normalizedPictures.get(i), 
                            ((Admin )user).getPatientsToTest().get(i).getValue()));
                    data = ((Admin )user).ExtractFeatures("Test", normalizedPictures.get(i));
                    TestButton.setEnabled(true);
                }

                tbModel = (DefaultTableModel) FeaturesMatrix_table.getModel();
                tbModel.addRow(data);
            }

        }
        catch (IOException ex)
        {
            JOptionPane.showMessageDialog(null, ex, "Exception", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_extractButtonActionPerformed

    private void normalizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_normalizeButtonActionPerformed

        try
        {
            for (int i = 0; i < paths.size(); i++)
            {
                if (!alreadyNormalized.contains(paths.get(i)))
                {
                    normalizedPictures.add(((Admin)user).Normalize(paths.get(i)));
                    alreadyNormalized.add(paths.get(i));
                }
            }

            extractButton.setEnabled(true);

            if (normalizedPictures.size() >= 1)
            {
                normalizedChoices.setEnabled(false);
                normalizedChoices.removeAllItems();
                normalizedChoices.setEnabled(true);

                for (int i = 0; i < normalizedPictures.size(); i++)
                {
                    normalizedChoices.addItem(normalizedPictures.get(i).getName());
                }
            }
        }
        catch (IOException | NullPointerException ex)
        {
            JOptionPane.showMessageDialog(null, ex, "Exception", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_normalizeButtonActionPerformed

    private void TrainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TrainButtonActionPerformed
        BrowsePictureAdmin_button.setEnabled(false);
        try 
        {   
            if (((Admin )user).getMatrix().size() <= 2) 
            {
                throw new Exception("You must train with more than 2 images");
            }

            ((Admin )user).Train();

            JOptionPane.showMessageDialog(null, "Train Done Succesfully!",
                "Info", JOptionPane.INFORMATION_MESSAGE);

            validateButton.setEnabled(true);
            ((Admin )user).setMatrix();

        }
        catch (IOException ex)
        {
            JOptionPane.showMessageDialog(null, ex,"Exception", JOptionPane.ERROR_MESSAGE);
        } 
        catch (Exception ex) 
        {
            JOptionPane.showMessageDialog(null, ex,"Exception", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_TrainButtonActionPerformed

    private void choicesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choicesActionPerformed

        if (choices.isEnabled())
        {
            ImageIcon imgIcon = new ImageIcon(paths.get(choices.getSelectedIndex()).toString());
            OriginalPhoto_label.setIcon(imgIcon);
        }

    }//GEN-LAST:event_choicesActionPerformed

    @SuppressWarnings("ManualArrayToCollectionCopy")
    private void BrowsePictureAdmin_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowsePictureAdmin_buttonActionPerformed

        JFileChooser chooseToOpen = new JFileChooser(System.getProperty("user.dir"));
        chooseToOpen.setMultiSelectionEnabled(true);
        int returnvalue = chooseToOpen.showOpenDialog(this);

        File[] selectedFiles;

        if (returnvalue == JFileChooser.APPROVE_OPTION)
        {
            chooseToOpen.setVisible(false);
            selectedFiles = chooseToOpen.getSelectedFiles();

            for (File selectedFile : selectedFiles)
            {
                paths.add(selectedFile);
            }

            if (paths.size() >= 1)
            {
                ImageIcon imgIcon = new ImageIcon(paths.get(0).toString());

                OriginalPhoto_label.setIcon(imgIcon);
                normalizeButton.setEnabled(true);
                choices.setEnabled(true);

                for (File selectedFile : selectedFiles)
                {
                    choices.addItem(selectedFile.getName());
                }

            }
        }

    }//GEN-LAST:event_BrowsePictureAdmin_buttonActionPerformed

    private void logOutAdminPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutAdminPageActionPerformed

        logout();

    }//GEN-LAST:event_logOutAdminPageActionPerformed

    /**
     * @param args the command line arguments
     */
    @SuppressWarnings("Convert2Lambda")
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new GUI().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
               
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AdminPage;
    private javax.swing.JRadioButton AdminRadioButton;
    private javax.swing.JButton BrowsePictureAdmin_button;
    private javax.swing.JButton BrowsePictureDoctor_button;
    private javax.swing.JComboBox<String> DoctorChoices;
    private javax.swing.JPanel DoctorPage;
    private javax.swing.JRadioButton DoctorRadioButton;
    private javax.swing.JLabel FeaturesMatrix_Label;
    private javax.swing.JTable FeaturesMatrix_table;
    private javax.swing.JPanel HomePage;
    private javax.swing.JLabel NormalizedImageLabel;
    private javax.swing.JLabel NormalizedPhoto_label;
    private javax.swing.JLabel OriginalImageLabel;
    private javax.swing.JLabel OriginalPhoto_label;
    private javax.swing.JLabel PatientID;
    private javax.swing.JLabel PatientImage;
    private javax.swing.JPanel PatientPage;
    private javax.swing.JRadioButton PatientRadioButton;
    private javax.swing.JLabel Result;
    private javax.swing.JLabel ResultLabel;
    private javax.swing.JButton TestButton;
    private javax.swing.JLabel TitleLabel;
    private javax.swing.JButton TrainButton;
    private javax.swing.ButtonGroup Users;
    private javax.swing.JComboBox<String> choices;
    private javax.swing.JButton clearAdminButton;
    private javax.swing.JButton clearDoctorButton;
    private javax.swing.JLabel doctorPhotoLabel;
    private javax.swing.JButton extractButton;
    private javax.swing.JLabel idLabel;
    private javax.swing.JTextField idText;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton logOutAdminPage;
    private javax.swing.JButton logOutDoctorPage;
    private javax.swing.JButton logOutPatientPage;
    private javax.swing.JButton loginButton;
    private javax.swing.JButton normalizeButton;
    private javax.swing.JComboBox<String> normalizedChoices;
    private javax.swing.JLabel numberOfPhotosToBeTested_label;
    private javax.swing.JButton overAllAccuracy;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JLabel patientIDLabel;
    private javax.swing.JLabel patientIdValue;
    private javax.swing.JButton sendToTest;
    private javax.swing.JLabel testLabel1;
    private javax.swing.JLabel testLabel2;
    private javax.swing.JButton toBeTested_button;
    private javax.swing.JLabel userLabel;
    private javax.swing.JButton validateButton;
    // End of variables declaration//GEN-END:variables
}

